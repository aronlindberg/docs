{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The IronHacks framework will solve your problem of where to start with documentation, by providing a basic explanation of how to do it easily. Look how easy it is to use the IronHacks framework. Authors Research Center for Open Digital Innovation Contribute Issue Tracker: github.com/rcodi/purdue-ironhacks/issues Source Code: github.com/rcodi/purdue-ironhacks Support If you are having issues, please let us know. We have a mailing list located at: opendigital@purdue.edu License The project is licensed under the MIT license Research Center for Open Digital Innovation.","title":"Home"},{"location":"#authors","text":"Research Center for Open Digital Innovation","title":"Authors"},{"location":"#contribute","text":"Issue Tracker: github.com/rcodi/purdue-ironhacks/issues Source Code: github.com/rcodi/purdue-ironhacks","title":"Contribute"},{"location":"#support","text":"If you are having issues, please let us know. We have a mailing list located at: opendigital@purdue.edu","title":"Support"},{"location":"#license","text":"The project is licensed under the MIT license Research Center for Open Digital Innovation.","title":"License"},{"location":"documentation/","text":"MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Setup mkdocs.yml theme: 'readthedocs' Extensions Install with pip install ___ markdown-checklist Example: foo bar baz Config List of mkdocs config options https://www.mkdocs.org/user-guide/configuration/ List of Markdown Extensions https://github.com/Python-Markdown/markdown/wiki/Third-Party-Extensions","title":"Documentation"},{"location":"documentation/#mkdocs","text":"For full documentation visit mkdocs.org .","title":"MkDocs"},{"location":"documentation/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"documentation/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"documentation/#setup","text":"mkdocs.yml theme: 'readthedocs'","title":"Setup"},{"location":"documentation/#extensions","text":"Install with pip install ___ markdown-checklist Example: foo bar baz","title":"Extensions"},{"location":"documentation/#config","text":"List of mkdocs config options https://www.mkdocs.org/user-guide/configuration/ List of Markdown Extensions https://github.com/Python-Markdown/markdown/wiki/Third-Party-Extensions","title":"Config"},{"location":"functions/","text":"App Config Work Flow and Functionality Being a Bloggify application, the application configuration is kept in a file: bloggify.js . This contains (see the inline comments): const conf = require(\"bloggify-config\"); // Set the right MongoDB URI (depending on the environment). const DB_URI = process.env.MONGODB_URI if (!DB_URI) { console.error(\">>>> Please provide the MongoDB URI. Set the MONGODB_URI environment variable.\"); } // Application metadata module.exports = conf({ title: \"IronHacks\", description: \"Hack for inovation and join the open data movement.\", // The production domain domain: \"http://www.ironhacks.com\", // Core plugins (which are initialized before the others) corePlugins: [\"bloggify-mongoose\"], // Application plugins plugins: [ \"bloggify-sendgrid\", \"bloggify-custom-assets\", \"bloggify-github-login\" ], // The application router router: \"bloggify-flexible-router\", // We do not have a blog page, so we do not need a Bloggify viewer at all viewer: null, // Plugins configuration config: { // Custom application assets \"bloggify-custom-assets\": { styles: [\"app/assets/stylesheets/index.css\"], server: [\"app/server/index.js\"] }, // The application router \"bloggify-flexible-router\": { controllers_dir: \"app/controllers\", routes_dir: \"app/routes\", error_pages: { 404: \"404.ajs\", 500: \"500.ajs\", bad_csrf: \"422.ajs\" } }, // Login with GitHub \"bloggify-github-login\": { githubClient: process.env.GITHUB_CLIENT, githubSecret: process.env.GITHUB_SECRET }, // Connect to the MongoDB database \"bloggify-mongoose\": { db: DB_URI, models_dir: \"app/models\" }, // Send emails \"bloggify-sendgrid\": { key: process.env.SENDGRID_KEY } } }, { cms_methods: false, server: { session: { storeOptions: { url: DB_URI } } } }); Routes The way how this Bloggify application is structured is explained below. The app directory contains the application files The application routes (urls) are: GET / GET /404 GET /500 GET|POST /admin GET /countdown GET|POST /logout GET|POST /new GET|POST /register GET /login GET /scores GET /search GET /quizzes GET|POST /posts/topicId-_slug/ POST /posts/topicId-_slug/comments POST /posts/topicId-_slug/delete GET|POST /posts/topicId-_slug/edit POST /posts/topicId-_slug/toggle-vote GET|POST /users/_user/edit GET /users/_user The GET method means that we fetch information from the server, while the POST means we post information to the server side. The routes may have associated controllers which are located in the app/controllers directory.","title":"Functions"},{"location":"functions/#app-config","text":"Work Flow and Functionality Being a Bloggify application, the application configuration is kept in a file: bloggify.js . This contains (see the inline comments): const conf = require(\"bloggify-config\"); // Set the right MongoDB URI (depending on the environment). const DB_URI = process.env.MONGODB_URI if (!DB_URI) { console.error(\">>>> Please provide the MongoDB URI. Set the MONGODB_URI environment variable.\"); } // Application metadata module.exports = conf({ title: \"IronHacks\", description: \"Hack for inovation and join the open data movement.\", // The production domain domain: \"http://www.ironhacks.com\", // Core plugins (which are initialized before the others) corePlugins: [\"bloggify-mongoose\"], // Application plugins plugins: [ \"bloggify-sendgrid\", \"bloggify-custom-assets\", \"bloggify-github-login\" ], // The application router router: \"bloggify-flexible-router\", // We do not have a blog page, so we do not need a Bloggify viewer at all viewer: null, // Plugins configuration config: { // Custom application assets \"bloggify-custom-assets\": { styles: [\"app/assets/stylesheets/index.css\"], server: [\"app/server/index.js\"] }, // The application router \"bloggify-flexible-router\": { controllers_dir: \"app/controllers\", routes_dir: \"app/routes\", error_pages: { 404: \"404.ajs\", 500: \"500.ajs\", bad_csrf: \"422.ajs\" } }, // Login with GitHub \"bloggify-github-login\": { githubClient: process.env.GITHUB_CLIENT, githubSecret: process.env.GITHUB_SECRET }, // Connect to the MongoDB database \"bloggify-mongoose\": { db: DB_URI, models_dir: \"app/models\" }, // Send emails \"bloggify-sendgrid\": { key: process.env.SENDGRID_KEY } } }, { cms_methods: false, server: { session: { storeOptions: { url: DB_URI } } } });","title":"App Config"},{"location":"functions/#routes","text":"The way how this Bloggify application is structured is explained below. The app directory contains the application files The application routes (urls) are: GET / GET /404 GET /500 GET|POST /admin GET /countdown GET|POST /logout GET|POST /new GET|POST /register GET /login GET /scores GET /search GET /quizzes GET|POST /posts/topicId-_slug/ POST /posts/topicId-_slug/comments POST /posts/topicId-_slug/delete GET|POST /posts/topicId-_slug/edit POST /posts/topicId-_slug/toggle-vote GET|POST /users/_user/edit GET /users/_user The GET method means that we fetch information from the server, while the POST means we post information to the server side. The routes may have associated controllers which are located in the app/controllers directory.","title":"Routes"},{"location":"install/","text":"Requirements node.js mongoDB Setup Clone the repo rcodi/the-ironhacks-platform git clone git@github.com:RCODI/the-ironhacks-platform.git cd the-ironhacks-platform Install the dependencies: npm install --save-dev Start MongoDB: mongod # or sudo mongod Configuration Before starting the app, you will have to create a file named .env , containing: GITHUB_CLIENT=... GITHUB_SECRET=... SENDGRID_KEY=... MONGODB_URI=mongodb://localhost/purdue_ironhacks You can get the GitHub keys after creating a GitHub application. Do not share these with anyone.","title":"Install"},{"location":"install/#requirements","text":"node.js mongoDB","title":"Requirements"},{"location":"install/#setup","text":"Clone the repo rcodi/the-ironhacks-platform git clone git@github.com:RCODI/the-ironhacks-platform.git cd the-ironhacks-platform Install the dependencies: npm install --save-dev Start MongoDB: mongod # or sudo mongod","title":"Setup"},{"location":"install/#configuration","text":"Before starting the app, you will have to create a file named .env , containing: GITHUB_CLIENT=... GITHUB_SECRET=... SENDGRID_KEY=... MONGODB_URI=mongodb://localhost/purdue_ironhacks You can get the GitHub keys after creating a GitHub application. Do not share these with anyone.","title":"Configuration"},{"location":"usage/","text":"Starting the application Start the app in dev mode: npm run start:dev Make yourself an admin, by passing YOUR GitHub username (the username of the account you use to sign in for the first time): ADMIN_USERNAME=<your-github-username> npm run start:dev For example: ADMIN_USERNAME=hackpurdue npm run start:dev Note : The very first start takes up to 30 seconds because there is no existing cache. After the cache is created, the next application starts will be much faster (1-3 seconds). Deploy When deployed to Heroku, the application url is https://<app-name>.herokuapp.com (unless it\u2019s using a custom domain). Note: When using a free dyno, it\u2019s working fine, but with some limitations: it\u2019s slower it\u2019s going to sleep if it\u2019s innactive for a certain period of time. it has bandwidth limits, but pretty liberal The app configuration is stored in the bloggify.js file. Make sure that the heroku remote exists (run git remote -v for that). If it doesn\u2019t exist, run: heroku git:remote ironhackplatform Commit all the changes and then run the following command: sh npm run deploy","title":"Usage"},{"location":"usage/#deploy","text":"When deployed to Heroku, the application url is https://<app-name>.herokuapp.com (unless it\u2019s using a custom domain). Note: When using a free dyno, it\u2019s working fine, but with some limitations: it\u2019s slower it\u2019s going to sleep if it\u2019s innactive for a certain period of time. it has bandwidth limits, but pretty liberal The app configuration is stored in the bloggify.js file. Make sure that the heroku remote exists (run git remote -v for that). If it doesn\u2019t exist, run: heroku git:remote ironhackplatform Commit all the changes and then run the following command: sh npm run deploy","title":"Deploy"}]}